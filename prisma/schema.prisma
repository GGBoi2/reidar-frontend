// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource mysql {
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  provider             = "mysql"
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @mysql.Text
  access_token      String? @mysql.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @mysql.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  daoMember     DaoMember?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DaoMember {
  id            String  @id @default(cuid())
  name          String  @default("")
  roles         String  @default("")
  image_url     String  @default("")
  biography     String  @default("") @mysql.Text
  contributions String  @default("") @mysql.Text
  votesFor      Vote[]  @relation("Vote_votedFor")
  votesAgainst  Vote[]  @relation("Vote_votedAgainst")
  user          User?   @relation(fields: [userId], references: [id])
  userId        String? @unique
  discordId     String? @unique
  votesCast     Int?    @default(0)
  pickable      Boolean @default(true)
}

model Vote {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  votedFor       DaoMember? @relation("Vote_votedFor", fields: [votedForId], references: [id])
  votedForId     String?    @map("votedFor")
  votedAgainst   DaoMember? @relation("Vote_votedAgainst", fields: [votedAgainstId], references: [id])
  votedAgainstId String?    @map("votedAgainst")

  @@index([votedForId])
  @@index([votedAgainstId])
}
